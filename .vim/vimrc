" syntax
syntax on
filetype on
set hlsearch
set showmatch
set incsearch
set cursorline
filetype plugin on

" colorscheme
" colorscheme gruvbox
colorscheme nord
set background=dark

" encoding
set encoding=utf-8
scriptencoding utf-8

" other
set t_Co=256
let mapleader=" "
set nocompatible
set updatetime=1000

" tabs and spaces
set tabstop=2
set copyindent
set autoindent
set noexpandtab
set indentexpr=
set shiftwidth=2
set softtabstop=2
set preserveindent

set list lcs=trail:·,tab:»\ 

" ignore case when searching
set ignorecase

" history
set undofile
set history=1000
set undolevels=1000
set undoreload=10000
set undodir=~/.vim/undo
"
" beep
set visualbell
set noerrorbells
set visualbell t_vb=

" cursor stays in the middle of the screen
set scrolloff=50

" show numbers of lines
set number
set relativenumber

" Write the old file out when switching between files.
" set autowrite

" display current cursor position in lower right corner.
set ruler

" line wrapping
set wrap
set textwidth=79
set formatoptions=qrn1

" code folding
" set foldenable
set nofoldenable

" mouse
set mouse=
set ttymouse=
set mousehide
map <ScrollWheelUp> <nop>
map <ScrollWheelDown> <nop>

" system clipboard
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" more useful command-line completion
set wildmenu

" auto-completion menu
set wildmode=list:longest

" open splits below and on the right
set splitright
set splitbelow

" indentLine
let g:indentLine_char = '|'
let g:indentLine_color_term = 239

" autostart
execute pathogen#infect()

" wincmd p puts the cursor in the main window
" autocmd VimEnter * wincmd p

" reload vim config
map <leader>r :source ~/.vim/vimrc<CR>

" Taglist
 " autocmd FileType c,h,cpp,java,sh,py nested :TlistOpen
let Tlist_Use_Right_Window = 1
let Tlist_Auto_Open = 1
" let TlistHighlightTag = 1
map <Leader>2 :TlistToggle<CR>

" Tagbar
" Open Tagbar only with specific files
" autocmd FileType c,h,cpp,java,sh nested :TagbarOpen
map <Leader>2 :TagbarToggle<CR>
let g:tagbar_left = 0
let g:tagbar_sort = 1
let g:tagbar_width = 25
let g:tagbar_indent = 1
let g:tagbar_foldlevel = 2
let g:tagbar_autoshowtag = 1
let g:tagbar_autopreview = 0
let g:tagbar_singleclick = 1
let g:tagbar_show_visibility = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_iconchars = ['+', '-']
highlight TagbarKind ctermfg=96
highlight TagbarType ctermfg=96
highlight TagbarScope ctermfg=96
highlight TagbarFoldIcon ctermfg=96
highlight TagbarHighlight ctermfg=96
highlight TagbarSignature ctermfg=96
highlight TagbarNestedKind ctermfg=96
highlight TagbarVisibilityPublic ctermfg=96
highlight TagbarVisibilityPrivate ctermfg=96
highlight TagbarVisibilityProtected ctermfg=96

" NERDTree
" autocmd FileType c,h,cpp,java,sh,py nested :NERDTree
" autocmd VimEnter * NERDTree | wincmd p
" autocmd BufEnter * lcd %:p:h
" let g:NERDTreeWinSize = 30
" map <Leader>1 :NERDTreeToggle<CR>
" let NERDTreeShowHidden=0
" let g:NERDTreeDirArrows=0
" let NERDTreeAutoDeleteBuffer=1
" let NERDTreeCascadeOpenSingleChildDir=1
" let NERDTreeMinimalUI=0
" let NERDTreeShowLineNumbers=0
" let NERDTreeShowBookmarks=1
" let NERDTreeBookmarksFile="/home/qeni/.NERDTreeBookmarks"
" let NERDTreeIgnore=['\.vim$', '\.o$', '\.pdf$', '\.png$', '\.jpg$', '\.doc$', '\.mp4$', '\.mp3$', '\.rar$', '\.zip$', '\~$']
" let NERDTreeHijackNetrw=0
" highlight NERDTreeDir guifg=#FF0000 ctermfg=red

" undotree
nnoremap <Leader>u :UndotreeToggle<cr>
if !exists('g:undotree_WindowLayout')
	let g:undotree_WindowLayout = 1
endif

" undotree window width
if !exists('g:undotree_SplitWidth')
	let g:undotree_SplitWidth = 40
endif

" diff window height
if !exists('g:undotree_DiffpanelHeight')
	let g:undotree_DiffpanelHeight = 20
endif

" auto open diff window
if !exists('g:undotree_DiffAutoOpen')
	let g:undotree_DiffAutoOpen = 1
endif

" Highlight changed text
if !exists('g:undotree_HighlightChangedText')
	let g:undotree_HighlightChangedText = 1
endif

" kill the capslock when leaving insert mode.
autocmd InsertLeave * set iminsert=0

" better copy/paste (go to insert, press F2 and paste text)
" set pastetoggle=<F2>
" set clipboard=unnamed

" Compiling directly in vim
nmap <Leader>9 :make<cr>

" run compiled file
map <Leader>0 :!./bin<CR>

" search with space
" noremap <space> /

" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Faster commands
noremap ; :

" Move to the first non-blank character of the line
nnoremap m ^

" Move to the last non-blank character of the line
nnoremap M $

" Undo/Redo with arrows
:map <Left> :undo<CR>
:map <Right> :redo<CR>

" Previous/Next function
:map <Up> [[
:map <Down> ]]

" ctrl+n to off backlight during search in text
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> :nohl<CR>

" search and replace (cs - replace first match, n - next)
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
		\:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" splitting
nnoremap <Leader>a :sp<CR>
nnoremap <Leader>s :vsp<CR>
nnoremap <Leader>k :resize +5<CR>
nnoremap <Leader>j :resize -5<CR>

" backup
" set nobackup
" set noswapfile
" set nowritebackup

" highlight colors
" autocmd VimEnter * ColorHighlight

" vim-airline
let g:airline_theme='powerlineish'

" vim-commentary
autocmd FileType c setlocal commentstring=//%s
autocmd FileType c++ setlocal commentstring=//%s
autocmd FileType python setlocal commentstring=#\ %s
